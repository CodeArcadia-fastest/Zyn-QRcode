 // Terms text
 const termsTexts = {
  ru: `<p><strong>Важно:</strong> Используя данный сайт, вы соглашаетесь с нижеприведёнными условиями:</p>
    <ul>
      <li>Автор сайта не несёт ответственности за любые действия пользователей, совершённые в результате использования этого ресурса.</li>
      <li>Запрещено пытаться обойти системы безопасности сайта.</li>
      <li>Запрещено использовать сайт в целях, нарушающих законодательство вашей страны.</li>
      <li>Все данные, генерируемые сайтом (включая QR-коды), предоставляются "как есть", без каких-либо гарантий.</li>
      <li>Администрация сайта оставляет за собой право вносить изменения в условия без предварительного уведомления.</li>
    </ul>`,
  en: `<p><strong>Important:</strong> By using this site, you agree to the following terms:</p>
    <ul>
      <li>The site author is not responsible for any actions taken by users as a result of using this resource.</li>
      <li>It is forbidden to attempt to bypass the site's security systems.</li>
      <li>It is prohibited to use the site for purposes that violate the laws of your country.</li>
      <li>All data generated by the site (including QR codes) is provided "as is" with no warranty.</li>
      <li>The site administration reserves the right to change these terms at any time without notice.</li>
    </ul>`
};

// Terms Modal logic
document.addEventListener("DOMContentLoaded", function () {
  const modal = document.getElementById("termsModal");
  const acceptBtn = document.getElementById("acceptTerms");
  const langSelect = document.getElementById("languageSelect");
  const termsText = document.getElementById("termsText");

  function updateLanguage(lang) {
    termsText.innerHTML = termsTexts[lang];
  }

  updateLanguage(langSelect.value);

  langSelect.addEventListener("change", () => {
    updateLanguage(langSelect.value);
  });

  if (!localStorage.getItem("termsAccepted")) {
    modal.style.display = "flex";
    document.body.classList.add("blocked");
  } else {
    modal.style.display = "none";
  }

  acceptBtn.addEventListener("click", () => {
    localStorage.setItem("termsAccepted", "true");
    modal.style.display = "none";
    document.body.classList.remove("blocked");
  });
});

// QR Generator with color support and cooldown
document.addEventListener("DOMContentLoaded", function () {
  const generateBtn = document.getElementById("generate");
  const input = document.getElementById("link");
  const qrImageContainer = document.getElementById("qr-image");
  let cooldown = false;

  generateBtn.addEventListener("click", () => {
    if (cooldown) return;

    const content = input.value.trim();
    if (content === "") {
      qrImageContainer.innerHTML = "<p class='text-warning'>Please enter text or a link.</p>";
      return;
    }

    const baseUrl = "https://api.qrserver.com/v1/create-qr-code/";
    const qrSize = "250x250";
    const defaultFormat = "png";
    const qrColor = document.getElementById("qrColor").value.substring(1);
    const bgColor = document.getElementById("bgColor").value.substring(1);
    const qrUrl = `${baseUrl}?size=${qrSize}&data=${encodeURIComponent(content)}&format=${defaultFormat}&color=${qrColor}&bgcolor=${bgColor}`;

    qrImageContainer.innerHTML = `
      <div class="fade-in">
        <img src="${qrUrl}" alt="QR Code" id="qr-code-img" class="rounded shadow">
        <br>
        <label for="format" class="mt-3">Choose format:</label>
        <select id="format" class="form-select w-auto d-inline-block ms-2">
          <option value="png">PNG</option>
          <option value="jpg">JPG</option>
          <option value="svg">SVG</option>
        </select>
        <button class="btn btn-outline-light mt-2 ms-2" id="download-btn">Download</button>
      </div>
    `;

    // Cooldown
    cooldown = true;
    generateBtn.disabled = true;
    generateBtn.textContent = "Please wait 5 seconds...";

    setTimeout(() => {
      cooldown = false;
      generateBtn.disabled = false;
      generateBtn.textContent = "Submit";
    }, 5000);

    // Download logic
    setTimeout(() => {
      document.getElementById("download-btn").addEventListener("click", async () => {
        const format = document.getElementById("format").value;
        const downloadUrl = `${baseUrl}?size=${qrSize}&data=${encodeURIComponent(content)}&format=${format}&color=${qrColor}&bgcolor=${bgColor}`;

        try {
          const response = await fetch(downloadUrl);
          const blob = await response.blob();
          const url = URL.createObjectURL(blob);

          const a = document.createElement("a");
          a.href = url;
          a.download = `qrcode.${format}`;
          document.body.appendChild(a);
          a.click();
          a.remove();
          URL.revokeObjectURL(url);
        } catch (error) {
          alert("Download failed. Try again.");
          console.error("Download error:", error);
        }
      });
    }, 100);
  });
});

const qrColor = document.getElementById("qrColor").value.substring(1);
const bgColor = document.getElementById("bgColor").value.substring(1);
